import java.util.ArrayList;
import java.util.Scanner;


public class L11 {
	
	/*26
	Створіть метод, який приймає параметр int та конвертує його з десятичної у двоічну систему обчислення та повертає у вигляді String. 
	Приклад- приймає 4, повертає =0b10=
	*/
	static String from10to2(int num) {
		String ans =  new String();
		while(num!=0) {
			int i = num % 2;
			ans += i;
			num /= 2;
		}
		ans = new StringBuffer(ans).reverse().toString();
    	return ans;
	}
	
	/*4
	 Створіть метод, який дозволяє видаляти будь який елемент по індексу в одновимірному масиві int[] 
	 Новий масив повинен повертатися з методу.
	*/
	static ArrayList<Integer> delElByInd(int[] arr,int index) {
		ArrayList<Integer> ans = new ArrayList<>();
		for(int i = 0; i < arr.length; i++) {
			if(i != index) ans.add(arr[i]);
		}
		return ans;
	}
	/*
	4 и 5 задание также можно сделать с помощью метода ans.remove();
	Этот метод удаляет элементы динамического массива как по индексу, так и по значению.
	
	Также можно использовать динамический масив только внутри метода, и выводить массив int[]
	
	Также можно не использовать динамический массив, используя дополнительные циклы, чтобы посчитать количество
	элементов в финальном масиве и создать его нужного размера 
	*/
	
	
	/*
	5
	Створіть метод, який дозволяє видаляти всі елементи в масиві int[] , які мають певне значення, наприклад дорівнюються 23. 
	Масив без видалених елементів повинен повертатися, як результат роботи методу.
	*/
	
	static ArrayList<Integer> delElByValue(int[] arr,int value) {
		ArrayList<Integer> ans = new ArrayList<>();
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] != value) ans.add(arr[i]);
		}
		return ans;
	}
	
	/*
	10
	Створіть метод, який дозволяє поєднати між собою будь яку кількість масивів int[] та повернути результуючий масив, 
	який буде складатися виключно з простих чисел, які були у складі масивів.
	*/
	
	static ArrayList<Integer> conAndShowSimp(int[] arr3, int[] arr4) {
		//обьединеям два массива
		int aLen = arr3.length;
        int bLen = arr4.length;
        int[] both = new int[aLen + bLen];
        System.arraycopy(arr3, 0, both, 0, aLen);
        //a - массив который копируем, 0 - индекс в масиве а, начиная с которого копируем
        //c - массив в который копируем, 0 - индекс в масиве с, начиная с которого вставляем
        //alen - количество элементов, которые вставляем
        System.arraycopy(arr4, 0, both, aLen, bLen);
		
        //создаем массив только из простых чисел
		ArrayList<Integer> ans = new ArrayList<>();
		for(int i = 0; i < both.length; i++) {
			int j = both[i] - 1;
			int num = both[i];
			if (num > 2) {
				while(num % j != 0){
					j--;
				}
				if(j == 1) ans.add(num);}
			} 
		return ans;
	}
	
	/*
	9
	Створіть метод, який приймає параметр типу String, та шукає у його складі паліндроми(рядки букв, 
	які однаково читаються у любому напрямку - приклад  йцууцй)Метод повинен повертати паліндром , 
	який має найбільшу довжину серед знайдених, якщо не знайдено ні одного, повертає пустий рядок "". 
	Приклад при параметрі "qwertyolo" результат буде "olo".
	*/
	
	static String findMaxPolindrom(String str) {
		String ans = new String();
		int lastSymbID = str.length()-1;
		int topLen = 0;
		int len = 0;
		int startID = 0;
		
		
		for(int i = 1; i < lastSymbID;i++) {
			
			for(int j = 0;j < 2; j++) {
				
				int step = 1;
				
				while(i - step >= 0 & i + step + j <= lastSymbID) {
					if(str.charAt(i-step) == str.charAt(i+step+j)) step++;
					else break;
				}
				
				if(step > 0) {
					step--;
					len = step * 2+1+j;
					if(len > topLen) {
						topLen = len;
						startID = i - step;
					}
				}
			}
		}
		
		ans = topLen > 0 ? str.substring(startID,startID+topLen) : "There aren`t any palindrom in this String";
		return ans;
	}
	
	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		
		/*26
		Створіть метод, який приймає параметр int та конвертує його з десятичної у двоічну систему обчислення та повертає у вигляді String. 
		Приклад- приймає 4, повертає =0b10=
		*/
		
		System.out.println("Input number ");
        int num = in.nextInt();		
        System.out.print(from10to2(num));
        
        
		/*4
		 Створіть метод, який дозволяє видаляти будь який елемент по індексу в одновимірному масиві int[] 
		 Новий масив повинен повертатися з методу.
		*/
        int[] arr = {0,1,2,3,4,5,6,7,8,9};
        System.out.println("\nInput index of element to delete ");
        int index = in.nextInt();
        
        for(int i = 0; i < delElByInd(arr, index).size(); i++) {
        	System.out.print(delElByInd(arr, index).get(i)+" ");
        }
        
        
		/*
		5
		Створіть метод, який дозволяє видаляти всі елементи в масиві int[] , які мають певне значення, наприклад дорівнюються 23. 
		Масив без видалених елементів повинен повертатися, як результат роботи методу.
		*/

        int[] arr2 = {0,1,2,3,0,1,2,3,0,1,2,3};
        System.out.println("\nInput value of elements to delete ");
        int value = in.nextInt();
        
        for(int i = 0; i < delElByValue(arr2, value).size(); i++) {
        	System.out.print(delElByValue(arr2, value).get(i)+" ");
        }
        
        
		/*
		10
		Створіть метод, який дозволяє поєднати між собою будь яку кількість масивів int[] та повернути результуючий масив, 
		який буде складатися виключно з простих чисел, які були у складі масивів.
		*/
        System.out.println();
        int[] arr3 = {0,1,2,3,4,5,6,7,8,9,10,11};
        int[] arr4 = {12,13,14,15,16,17,18,19,20,21,22,23};
        
        for(int i = 0; i < conAndShowSimp(arr3, arr4).size(); i++) {
        	System.out.print(conAndShowSimp(arr3, arr4).get(i)+" ");
        }
        
        
        
		/*
		9
		Створіть метод, який приймає параметр типу String, та шукає у його складі паліндроми(рядки букв, 
		які однаково читаються у любому напрямку - приклад  йцууцй)Метод повинен повертати паліндром , 
		який має найбільшу довжину серед знайдених, якщо не знайдено ні одного, повертає пустий рядок "". 
		Приклад при параметрі "qwertyolo" результат буде "olo".
		*/
    System.out.println();
    String str = "qetrteqwyttyly";
		System.out.println(findMaxPolindrom(str));
		String str2 = "qetteqwyttyly";
		System.out.println(findMaxPolindrom(str2));


	}
}
